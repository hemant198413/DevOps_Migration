{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "nodeCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of nodes for the cluster. 1 Node is enough for Dev/Test and minimum 3 nodes, is recommended for Production"
      },
      "minValue": 1,
      "maxValue": 100
    },
    "nodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "aksClusterName": {
      "type": "string",
      "defaultValue": "aks101cluster-vmss",
      "metadata": {
        "description": "The name of the Managed Cluster resource."
      }
    },
    "dnsPrefix": {
      "type": "string",
      "metadata": {
        "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
      }
    },
    "dnsServiceIP": {
      "type": "String"
    },
    "engineerADGroupPrincipalId": {
      "type": "string"
    },
    "existingSubnetName": {
      "type": "string",
      "metadata": {
        "description": "Subnet name that will contain the App Service Environment"
      }
    },
    "existingVirtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "Name of an existing VNET that will contain this AKS deployment."
      }
    },
    "existingVirtualNetworkResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of the existing VNET resource group"
      }
    },
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "type": "string",
      "metadata": {
        "description": "The location of AKS resource."
      }
    },
    "maxCount": {
      "defaultValue": 30,
      "type": "int",
      "metadata": {
        "description": "Maximum number of nodes."
      }
    },
    "maxPods": {
      "defaultValue": 30,
      "type": "int",
      "metadata": {
        "description": "Maximum number of pods that can run on a node."
      }
    },
    "minCount": {
      "defaultValue": 1,
      "type": "int",
      "metadata": {
        "description": "Minimum number of nodes."
      }
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 256,
      "metadata": {
        "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
      },
      "minValue": 0,
      "maxValue": 1023
    },
    "osType": {
      "type": "string",
      "defaultValue": "Linux",
      "allowedValues": [
        "Linux",
        "Windows"
      ],
      "metadata": {
        "description": "The type of operating system."
      }
    },
    "resourcetags": {
      "type": "object"
    },
    "environment": {
      "type": "String"
    },
    "tenantID": {
      "type": "string"
    },
    "logWorkspacesName": {
      "type": "string"
    },
    "privateDnsZones_privatelink_eastus2_azmk8s_io_externalid": {
      "defaultValue": "/subscriptions/1289fb92-7d96-43a6-8cc0-00655e6c8e3b/resourceGroups/privatelink-dns-hub/providers/Microsoft.Network/privateDnsZones/privatelink.eastus2.azmk8s.io",
      "type": "String"
    },
    "keyEncryptionKeyURL": {
      "type": "String"
    },
    "diskEncryptionSets": {
      "type": "String"
    }

  },
  "variables": {
    "vnetSubnetId": "[resourceId(parameters('existingVirtualNetworkResourceGroup'),'Microsoft.Network/virtualNetworks/subnets',parameters('existingVirtualNetworkName'),parameters('existingSubnetName'))]",
    "logWorkspacesExternalid": "[concat(subscription().id,'/resourceGroups/','logging-monitoring-spoke-eastus2','/providers/microsoft.operationalinsights/workspaces/', parameters('logWorkspacesName'))]",
    "aksOrchestratorVersion": "1.19.13",
    "diskEncryptionKeyVaultResourceID": "[resourceId(subscription().subscriptionId,resourceGroup().name, 'Microsoft.KeyVault/vaults',concat('kv-sc-',uniqueString(resourceGroup().id)))]",
    "keyVaultName": "[concat('kv-sc-',uniqueString(resourceGroup().id))]",
    "diskEncryptionSetId": "[resourceId(subscription().subscriptionId,resourceGroup().name,'Microsoft.Compute/diskEncryptionSets/',parameters('diskEncryptionSets'))]"
  },
  "resources": [
    {
      "apiVersion": "2020-11-01",
      "type": "Microsoft.ContainerService/managedClusters",
      "location": "[parameters('location')]",
      "name": "[parameters('aksClusterName')]",
      "tags": {
        "cost-center": "[parameters('resourcetags').costcenter]",
        "owner-email": "[parameters('resourcetags').owneremail]",
        "application": "[parameters('resourcetags').application]",
        "application-id": "[parameters('resourcetags').applicationid]",
        "env": "[parameters('resourcetags').env]",
        "version": "[parameters('resourcetags').version]",
        "service": "[parameters('resourcetags').service]",
        "resource-name": "[concat(parameters('aksClusterName'),'.container-service-managed-clusters')]"
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities/','hips-cdp-app-managed-identity')]": {}
        }
      },
      "sku": {
        "name": "Basic",
        "tier": "paid"
      },
      "properties": {
        "diskEncryptionSetID": "[resourceID('Microsoft.Compute/diskEncryptionSets/', parameters('diskEncryptionSets'))]",
        "dnsPrefix": "[parameters('dnsPrefix')]",
        "kubernetesVersion": "[variables('aksOrchestratorVersion')]",
        "enableRBAC": true,
        "enablePodSecurityPolicy": false,
        "servicePrincipalProfile": {
          "clientId": "msi"
        },
        "addonProfiles": {
          "kubeDashboard": {
            "enabled": false
          },
          "omsAgent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[variables('logWorkspacesExternalid')]"
            }
          }
        },
        "networkProfile": {
          "networkPlugin": "azure",
          "networkPolicy": "azure",
          "serviceCidr": "100.64.0.0/17",
          "dnsServiceIP": "[parameters('dnsServiceIP')]",
          "dockerBridgeCidr": "100.65.0.1/17",
          "outboundType": "loadBalancer"
        },
        "aadProfile": {
          "managed": true,
          "adminGroupObjectIDs": [
            "[parameters('engineerADGroupPrincipalId')]"
          ],
          "tenantID": "[parameters('tenantID')]"
        },
        "apiServerAccessProfile": {
          "enablePrivateCluster": true,
          "privateDNSZone": "[parameters('privateDnsZones_privatelink_eastus2_azmk8s_io_externalid')]"
        },
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
            "count": "[parameters('nodeCount')]",
            "vmSize": "[parameters('nodeVMSize')]",
            "osType": "[parameters('osType')]",
            "storageProfile": "ManagedDisks",
            "type": "VirtualMachineScaleSets",
            "availabilityZones": [
              "1",
              "2",
              "3"
            ],
            "vnetSubnetID": "[variables('vnetSubnetId')]",
            "maxPods": "[parameters('maxPods')]",
            "mode": "System",
            "enableAutoScaling": true,
            "maxCount": "[parameters('maxCount')]",
            "minCount": "[parameters('minCount')]"
          }
        ]
      }
    }
  ],
  "outputs": {
    "controlPlaneFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters/', parameters('aksClusterName'))).privateFQDN]"
    }
  }
}